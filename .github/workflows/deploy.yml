name: Deploy to GitHub Pages and Google Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Test Job - validates code before deployment
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Validate backend dependencies
      working-directory: ./backend
      run: |
        echo "Checking backend dependencies..."
        npm ls --depth=0
        echo "‚úÖ Backend dependencies validated"

    - name: Run basic tests
      working-directory: ./backend
      run: |
        echo "Running basic syntax checks..."
        node -c index.js
        echo "‚úÖ Backend syntax check passed"

    - name: Validate HTML
      run: |
        echo "Validating HTML structure..."
        # Basic HTML validation - escape the ! character
        if grep -q "DOCTYPE html" index.html; then
          echo "‚úÖ HTML DOCTYPE found"
        else
          echo "‚ùå Missing HTML DOCTYPE"
          exit 1
        fi

  # Deploy Backend to Google Cloud Functions
  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        export_default_credentials: true

    - name: Verify Google Cloud authentication
      run: |
        gcloud auth list
        gcloud config list project

    - name: Deploy Cloud Function
      working-directory: ./backend
      run: |
        echo "Deploying Cloud Function..."
        gcloud functions deploy outfit-voting \
          --runtime nodejs18 \
          --trigger-http \
          --allow-unauthenticated \
          --memory 256MB \
          --timeout 30s \
          --region europe-west3 \
          --set-env-vars BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }} \
          --quiet

    - name: Get Function URL
      id: get-url
      run: |
        echo "Getting function URL..."
        FUNCTION_URL=$(gcloud functions describe outfit-voting --region=europe-west3 --format="value(httpsTrigger.url)" 2>/dev/null || echo "")
        if [ -z "$FUNCTION_URL" ]; then
          echo "‚ùå Failed to get function URL"
          exit 1
        fi
        echo "function_url=$FUNCTION_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ Backend deployed to: $FUNCTION_URL"

  # Build and Deploy Frontend to GitHub Pages
  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Update Backend URL in Frontend
      run: |
        # Update the backend URL in the cloud-storage.js file as fallback
        BACKEND_URL="https://europe-west3-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/outfit-voting"
        sed -i "s|your-outfit-voting-project|${{ secrets.GCP_PROJECT_ID }}|g" js/cloud-storage.js
        echo "‚úÖ Updated fallback backend URL to: $BACKEND_URL"

    - name: Create production config
      run: |
        cat > js/config.js << EOF
        // Production configuration
        window.APP_CONFIG = {
          BACKEND_URL: 'https://europe-west3-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/outfit-voting',
          ENVIRONMENT: 'production',
          VERSION: '${{ github.sha }}',
          BUILD_TIME: '$(date -u +"%Y-%m-%dT%H:%M:%SZ")'
        };
        console.log('App config loaded:', window.APP_CONFIG);
        EOF
        echo "‚úÖ Created production config"

    - name: Add config script to HTML
      run: |
        # Add config.js before cloud-storage.js with proper indentation
        sed -i 's|    <script src="js/cloud-storage.js"></script>|    <script src="js/config.js"></script>\n    <script src="js/cloud-storage.js"></script>|g' index.html
        echo "‚úÖ Added config script to HTML"
        
        # Verify the change
        if grep -q "js/config.js" index.html; then
          echo "‚úÖ Config script successfully added"
        else
          echo "‚ùå Failed to add config script"
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Notify on completion
  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        echo "=== Deployment Summary ==="
        echo "Backend Status: ${{ needs.deploy-backend.result }}"
        echo "Frontend Status: ${{ needs.deploy-frontend.result }}"
        echo ""
        
        if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Frontend: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "Backend: https://europe-west3-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/outfit-voting"
          echo ""
          echo "‚úÖ Both frontend and backend deployed successfully"
        elif [ "${{ needs.deploy-backend.result }}" == "success" ]; then
          echo "‚úÖ Backend deployed successfully"
          echo "‚ùå Frontend deployment failed"
          echo "Backend: https://europe-west3-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/outfit-voting"
          exit 1
        elif [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "‚ùå Backend deployment failed"
          echo "‚úÖ Frontend deployed successfully"
          echo "Frontend: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          exit 1
        else
          echo "‚ùå Both deployments failed"
          exit 1
        fi
